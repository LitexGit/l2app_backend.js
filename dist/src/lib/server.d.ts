import { Contract } from "web3/node_modules/web3-eth-contract";
import { L2_CB, L2_EVENT, PN } from "../conf/contract";
import { Session } from "./session";
export declare let debug: boolean;
export declare let CITA: any;
export declare let cpProvider: any;
export declare let web3: any;
export declare let ethPN: Contract;
export declare let appPN: Contract;
export declare let ERC20: Contract;
export declare let sessionPN: Contract;
export declare let callbacks: Map<L2_EVENT, L2_CB>;
export declare class SDK {
    static instance: SDK;
    private constructor();
    static GetInstance(): SDK;
    private ethWatcher;
    private appWatcher;
    private appRpcUrl;
    private ethRpcUrl;
    init(cpPrivateKey: string, ethRpcUrl: string, ethPaymentNetwork: PN, appRpcUrl: string, appPaymentNetwork: PN, sessionPayNetwork: PN): Promise<void>;
    setDebug(debugFlag: boolean): void;
    setLogger(logger: any): void;
    deposit(amount: number | string, token?: string): Promise<{}>;
    withdraw(amount: number | string, token?: string): Promise<any>;
    openChannelForUser(userAddress: string, token?: string): Promise<{}>;
    rebalance(userAddress: string, amount: number | string, token?: string): Promise<any>;
    kickUser(userAddress: string, token?: string): Promise<{}>;
    transfer(to: string, amount: number | string, token?: string): Promise<any>;
    startSession(sessionID: string, game: string, userList: string[], customData: any): Promise<void>;
    joinSession(sessionID: string, user: string): Promise<string>;
    getSession(sessionID: string): Promise<Session>;
    sendMessage(sessionID: string, to: string, type: number, content: string, amount?: string, token?: string): Promise<string>;
    closeSession(sessionID: string): Promise<any>;
    on(event: L2_EVENT, callback: L2_CB): void;
    getPaymentNetwork(token?: string): Promise<{
        userCount: any;
        userTotalDeposit: any;
        userTotalWithdraw: any;
        providerDeposit: any;
        providerWithdraw: any;
        providerBalance: any;
        providerOnChainBalance: any;
    }>;
    getTokeFeeRate(token?: string): Promise<number>;
    getChannelInfo(userAddress: string, token?: string): Promise<any>;
    getAllTXs(token?: string): Promise<any>;
    getMessagesBySessionID(sessionID: string): Promise<any>;
    getPlayersBySessionID(sessionID: string): Promise<any>;
    exportSessionBytes(sessionID: string): Promise<any>;
    private initListeners;
    private checkBalance;
    private buildTransferData;
}
